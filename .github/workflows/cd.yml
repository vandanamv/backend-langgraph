name: CD — Deploy LangGraph Backend

on:
  workflow_run:
    workflows: ["CI — Test Python Backend"]
    types:
      - completed

permissions:
  contents: read
  packages: write

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/langgraph-backend:latest
            ghcr.io/${{ github.repository_owner }}/langgraph-backend:${{ github.sha }}

      - name: Attempt deploy with LangGraph CLI (robust) 
        env:
          LANGCHAIN_API_KEY: ${{ secrets.LANGCHAIN_API_KEY }}
          IMAGE: ghcr.io/${{ github.repository_owner }}/langgraph-backend:${{ github.sha }}
        run: |
          echo "Attempting robust CLI deploy using LangGraph"
          python -m pip install --upgrade pip
          pip install langgraph || true

          # Candidate CLI names / module forms to try.
          candidates=(
            "langgraph"
            "lg"
            "lang"
            "python -m langgraph"
            "python -m langgraph.cli"
            "python -m langgraph.__main__"
          )

          set +e
          FOUND_URL=""
          for cmd in "${candidates[@]}"; do
            echo "Trying: $cmd deploy --image $IMAGE --service-name langgraph-backend --api-key <redacted>"
            # Build the full command string. Use eval to allow 'python -m' forms.
            FULL="$cmd deploy --image \"$IMAGE\" --service-name \"langgraph-backend\" --api-key \"$LANGCHAIN_API_KEY\""
            OUTPUT=$(eval $FULL 2>&1)
            RET=$?
            echo "Exit code: $RET"
            echo "Output:\n$OUTPUT"

            # Try to extract an http(s) URL from the output
            URL=$(echo "$OUTPUT" | grep -Eo 'https?://[^ \"\)\]<>]+' | head -n1 || true)
            if [ -n "$URL" ]; then
              echo "Found URL: $URL"
              FOUND_URL="$URL"
              break
            fi

            # If output looks like JSON, try to jq common fields
            if echo "$OUTPUT" | jq -e . >/dev/null 2>&1; then
              URL=$(echo "$OUTPUT" | jq -r '.url // .service_url // .public_url // empty' 2>/dev/null || true)
              if [ -n "$URL" ]; then
                echo "Found URL via jq: $URL"
                FOUND_URL="$URL"
                break
              fi
            fi

          done
          set -e

          if [ -n "$FOUND_URL" ]; then
            echo "service_url=$FOUND_URL" >> $GITHUB_OUTPUT
            echo "Exported service_url to GITHUB_OUTPUT"
          else
            echo "No URL found from CLI attempts; continuing to other deploy methods if available." 
          fi

      - name: Output success info
        run: |
          echo "✅ CD completed!"
          echo "Image pushed to:"
          echo "  ghcr.io/${{ github.repository_owner }}/langgraph-backend:latest"
          echo ""
          echo "If CLI deploy succeeded, your backend should now be live on the LangGraph platform."

      - name: Attempt HTTP deploy using Python script (if LANGGRAPH_API_URL is set)
        if: ${{ secrets.LANGGRAPH_API_URL != '' }}
        env:
          LANGCHAIN_API_KEY: ${{ secrets.LANGCHAIN_API_KEY }}
          LANGGRAPH_API_URL: ${{ secrets.LANGGRAPH_API_URL }}
          IMAGE: ghcr.io/${{ github.repository_owner }}/langgraph-backend:${{ github.sha }}
        run: |
          python -m pip install --upgrade pip
          pip install requests || true
          python deploy_langgraph.py
