name: CD — Deploy LangGraph Backend

on:
  workflow_run:
    workflows: ["CI — Test Python Backend"]
    types:
      - completed

permissions:
  contents: read
  packages: write

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    outputs:
      service_url: ${{ steps.publish.outputs.service_url }}

    steps:
      - uses: actions/checkout@v4
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/langgraph-backend:${{ github.sha }}

      - name: Deploy to LangGraph (HTTP API)
        id: publish
        env:
          LANGCHAIN_API_KEY: ${{ secrets.LANGCHAIN_API_KEY }}
          LANGGRAPH_API_URL: ${{ secrets.LANGGRAPH_API_URL }}
          IMAGE: ghcr.io/${{ github.repository_owner }}/langgraph-backend:${{ github.sha }}
        run: |
          echo "Triggering deployment to LangGraph for image $IMAGE"
          API_URL="$LANGGRAPH_API_URL"

          # If no API URL configured, skip HTTP deploy and export empty service_url
          if [ -z "$API_URL" ] || echo "$API_URL" | grep -q "example"; then
            echo "No LANGGRAPH_API_URL configured; skipping HTTP deploy step"
            echo "service_url=" >> $GITHUB_OUTPUT
            exit 0
          fi

          PAYLOAD=$(jq -n --arg image "$IMAGE" '{image: $image, service_name: "langgraph-backend"}')

          HTTP_RESPONSE=$(curl -sS -w "\n%{http_code}" -X POST "$API_URL" \
            -H "Authorization: Bearer $LANGCHAIN_API_KEY" \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD" ) || true

          HTTP_STATUS=$(echo "$HTTP_RESPONSE" | tail -n1)
          HTTP_BODY=$(echo "$HTTP_RESPONSE" | sed '$d')

          echo "HTTP status: $HTTP_STATUS"
          if [ "$HTTP_STATUS" -lt 200 ] || [ "$HTTP_STATUS" -ge 300 ]; then
            echo "Deployment failed with status $HTTP_STATUS" >&2
            echo "Response body:" >&2
            echo "$HTTP_BODY" >&2
            if [ "$HTTP_STATUS" = "405" ]; then
              echo "HTTP 405: Method Not Allowed. Check the endpoint path and allowed methods." >&2
            fi
            if ! echo "$HTTP_BODY" | jq -e . >/dev/null 2>&1; then
              echo "Response is not JSON; cannot parse service URL. Aborting." >&2
              exit 1
            fi
          fi

          SERVICE_URL=$(echo "$HTTP_BODY" | jq -r '.url // .service_url // .public_url // empty')
          if [ -z "$SERVICE_URL" ]; then
            echo "No service URL returned by LangGraph API. Full JSON response:" >&2
            echo "$HTTP_BODY" >&2
            echo "service_url=" >> $GITHUB_OUTPUT
          else
            echo "Service URL: $SERVICE_URL"
            echo "service_url=$SERVICE_URL" >> $GITHUB_OUTPUT
          fi

      - name: Wait for service to become healthy
        if: ${{ steps.publish.outputs.service_url != '' }}
        env:
          SERVICE_URL: ${{ steps.publish.outputs.service_url }}
        run: |
          echo "Waiting for $SERVICE_URL to be healthy..."
          for i in $(seq 1 20); do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$SERVICE_URL" || echo "000")
            echo "Attempt $i: status=$STATUS"
            if [ "$STATUS" = "200" ]; then
              echo "Service healthy!"
              exit 0
            fi
            sleep 6
          done
          echo "Service did not become healthy after waiting." >&2
          exit 1

      - name: Deploy with LangGraph CLI (fallback)
        if: ${{ (secrets.LANGGRAPH_API_URL == '' || secrets.LANGGRAPH_API_URL == null) && secrets.LANGCHAIN_API_KEY != '' }}
        env:
          LANGCHAIN_API_KEY: ${{ secrets.LANGCHAIN_API_KEY }}
          IMAGE: ghcr.io/${{ github.repository_owner }}/langgraph-backend:${{ github.sha }}
        run: |
          echo "Attempting CLI deploy using langgraph package"
          python -m pip install --upgrade pip
          pip install langgraph || true

          if ! command -v langgraph >/dev/null 2>&1; then
            echo "langgraph CLI not found after installation; the package may not provide a CLI or name differs." >&2
            echo "Please install the CLI or set LANGGRAPH_API_URL for API deploys." >&2
            exit 1
          fi

          # Attempt CLI deploy (adjust flags to match actual CLI)
          echo "Running: langgraph deploy --image $IMAGE --service-name langgraph-backend --api-key <redacted>"
          langgraph deploy --image "$IMAGE" --service-name "langgraph-backend" --api-key "$LANGCHAIN_API_KEY" || {
            echo "CLI deploy failed; please verify CLI usage and authentication." >&2
            exit 1
          }
